1254. Number of Closed Islands
Medium
3.4K
113
Companies
Given a 2D grid consists of 0s (land) and 1s (water).  An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s.

Return the number of closed islands.

 

Example 1:



Input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]
Output: 2
Explanation: 
Islands in gray are closed because they are completely surrounded by water (group of 1s).
Example 2:



Input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]
Output: 1
Example 3:

Input: grid = [[1,1,1,1,1,1,1],
               [1,0,0,0,0,0,1],
               [1,0,1,1,1,0,1],
               [1,0,1,0,1,0,1],
               [1,0,1,1,1,0,1],
               [1,0,0,0,0,0,1],
               [1,1,1,1,1,1,1]]
Output: 2
 

Constraints:

1 <= grid.length, grid[0].length <= 100
0 <= grid[i][j] <=1
Accepted
152.4K
Submissions
232.7K
Acceptance Rate
65.5%
Seen this question in a real interview before?
1/4



class Solution {
    vector<int> drow { 0,-1,0,1 };
    vector<int> dcol { -1,0,1,0 };
    int n,m;
public:
    bool fun(int i, int j, vector<vector<int>> grid, vector<vector<int>>&vis)    {
        if(vis[i][j]==true)  {
            return false;
        }

        bool ans = true;
        queue<pair<int,int>> q;
        q.push({i,j});
        vis[i][j] = 1;

        while(!q.empty())   {
            auto it = q.front();
            q.pop();
            int r = it.first;
            int c = it.second;

            if(r==0 || r==n-1 || c==0 || c==m-1)    {
                ans = false;
            }

            for(int k=0; k<4; k++)  {
                int dr = r + drow[k];
                int dc = c + dcol[k];

                if(dr>=0&&dr<n&&dc>=0&&dc<m && grid[dr][dc]==0 && vis[dr][dc]==false)   {
                    q.push({dr,dc});
                    vis[dr][dc] = true;
                }
            }
        }

        // cout<<i<<" "<<j<<" is "<<ans<<"\n";
        return ans;
    }

    int closedIsland(vector<vector<int>>& grid) {
        n = grid.size();
        m = grid[0].size();
        int res = 0;

        vector<vector<int>> vis (n, vector<int> (m, false));

        for(int i=1; i<n-1; i++)  {
            for(int j=1; j<m-1; j++)  {
                if(grid[i][j]==0 && vis[i][j]==false)    {
                    res += fun(i,j,grid,vis) == true ? 1 : 0;
                }
            }
        }

        return res;
    }
};