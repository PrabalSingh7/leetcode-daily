2305. Fair Distribution of Cookies
Medium
1.2K
56
You are given an integer array cookies, where cookies[i] denotes the number of cookies in the ith bag. You are also given an integer k that denotes the number of children to distribute all the bags of cookies to. All the cookies in the same bag must go to the same child and cannot be split up.

The unfairness of a distribution is defined as the maximum total cookies obtained by a single child in the distribution.

Return the minimum unfairness of all distributions.

 

Example 1:

Input: cookies = [8,15,10,20,8], k = 2
Output: 31
Explanation: One optimal distribution is [8,15,8] and [10,20]
- The 1st child receives [8,15,8] which has a total of 8 + 15 + 8 = 31 cookies.
- The 2nd child receives [10,20] which has a total of 10 + 20 = 30 cookies.
The unfairness of the distribution is max(31,30) = 31.
It can be shown that there is no distribution with an unfairness less than 31.
Example 2:

Input: cookies = [6,1,3,2,2,4,1,2], k = 3
Output: 7
Explanation: One optimal distribution is [6,1], [3,2,2], and [4,1,2]
- The 1st child receives [6,1] which has a total of 6 + 1 = 7 cookies.
- The 2nd child receives [3,2,2] which has a total of 3 + 2 + 2 = 7 cookies.
- The 3rd child receives [4,1,2] which has a total of 4 + 1 + 2 = 7 cookies.
The unfairness of the distribution is max(7,7,7) = 7.
It can be shown that there is no distribution with an unfairness less than 7.
 

Constraints:

2 <= cookies.length <= 8
1 <= cookies[i] <= 105
2 <= k <= cookies.length
34.8K
53.4K
65.2%



ðŸ’¥âœ”ðŸ’» C++ || BACKTRACKING || Commented Code
thursday07
100 Days Badge 2022
24
0
a few seconds ago
C++
Array
Backtracking
Recursion
Intuition
Looking at constraints ( <= 8 ) && That we have to divide the array regarding some constraints , we can say it is a simple recursion problem .

Approach
For each index we wil try to put it into all of k subsets one by one.
When we are done with traversal of array , we will calculate the max of all subset sums , and try to minimize this as per questions requirements.
Points of Observation =>

If k == n (size of array), we can simply return the largest value , as then all values will go to one subset only. This, will solve the case for (k==n) in T(O)=O(nlogn) instead of T(o)=O(n^k).
We, can use backtracking here to optimize the approach . As, without backtracking in only recursion we will have to pass the subset sum array by copying each time to the next recursive call that will result in the T(O) of O(k^(n+1)) instead of O(k^n). {might also give TLE}
Thus by using backtracking and passing the value by referenec we can do it in O(k^n).
download (1).jfif

Complexity
Time complexity : O(k^k)
Space complexity : O(k)
Code
class Solution {
    int res = 1e6;
public:
    void fun(int idx, vector<int> &c, vector<int> &sum)  { 
        if(idx==c.size())   {
            int mx = -1e6;
            for(auto it : sum)
                mx = max(mx,it);
            res = min(res,mx);
            return;
        }

        for(int i=0; i<sum.size(); i++) {
            sum[i] += c[idx];
            fun(idx+1,c,sum);
            sum[i] -= c[idx];
        }
    }

    int distributeCookies(vector<int>& cookies, int k) {
        sort(cookies.begin(), cookies.end());
        int n = cookies.size();

        if(n==k)    {
            return cookies[n-1];
        }

        vector<int> sum(k,0); 
        fun(0,cookies,sum);

        return res;
    }
};
download (2).jfif