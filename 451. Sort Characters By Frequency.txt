451. Sort Characters By Frequency
Medium

5451

205

Add to List

Share
Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.

Return the sorted string. If there are multiple answers, return any of them.

 

Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.
 

Constraints:

1 <= s.length <= 5 * 105
s consists of uppercase and lowercase English letters and digits.
Accepted
429,489
Submissions
622,052



class Solution {
public:
    string frequencySort(string s) {
        
        unordered_map<char,int> mp;
        
        for(auto it:s)  {
            mp[it]++;
        }
        
        priority_queue<pair<int,char>> pq;
        for(auto it:mp) {
            int freq = it.second;
            char ch = it.first;
            pq.push({freq,ch});
        }
        
        string res;
        while(!pq.empty())  {
            auto it = pq.top();
            pq.pop();
            int freq = it.first;
            char ch = it.second;
            for(int i=0; i<freq; i++)   {
                res+=ch;
            }
        }
        
        return res;
    }
};