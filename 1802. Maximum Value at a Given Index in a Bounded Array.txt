1802. Maximum Value at a Given Index in a Bounded Array
Medium
1.4K
226
You are given three positive integers: n, index, and maxSum. You want to construct an array nums (0-indexed) that satisfies the following conditions:

nums.length == n
nums[i] is a positive integer where 0 <= i < n.
abs(nums[i] - nums[i+1]) <= 1 where 0 <= i < n-1.
The sum of all the elements of nums does not exceed maxSum.
nums[index] is maximized.
Return nums[index] of the constructed array.

Note that abs(x) equals x if x >= 0, and -x otherwise.

 

Example 1:

Input: n = 4, index = 2,  maxSum = 6
Output: 2
Explanation: nums = [1,2,2,1] is one array that satisfies all the conditions.
There are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2].
Example 2:

Input: n = 6, index = 1,  maxSum = 10
Output: 3
 

Constraints:

1 <= n <= maxSum <= 109
0 <= index < n
29.7K
80.6K
36.8%




ðŸ’¥âœ”ðŸ“ƒ C++ || Maths + Binary Search || Commented Code
thursday07
100 Days Badge 2022
22
0
a few seconds ago
C++
Array
Math
Binary Search
Intuition
Approach
Complexity
Time complexity : O(logN)
Space complexity : O(1)
download (1).jfif

Code
class Solution {
public:
    typedef long long ll;

    int maxValue(int N, int INDEX, int MAXSUM) {
        ll n = (ll)N;
        ll index = (ll)INDEX;
        ll maxSum = (ll)MAXSUM;

        ll lb = 1;
        ll ub = maxSum - (n-1);

        ll res_index_val = -1e9;

        while(lb <= ub)  {
            ll mid = lb + (ub-lb)/2;
            ll currSum = 0;

            if(1)   {
                //left evaluation
                ll len = index;
                if(len != 0 && len<mid-1)   
                    currSum += ( ((mid-1)*(mid))/2 - ((mid-1-len)*(mid-len))/2 );
                else if(len != 0 && len==mid-1)   
                    currSum += ((mid-1)*(mid))/2 ;
                else if(len != 0 && len>mid-1)   
                    currSum += ( ((mid-1)*(mid))/2 + len-(mid-1) );
                
                //adding mid value
                currSum += mid;

                //right evaluation
                len = n-1-index;
                if(len != 0 && len<mid-1)   
                    currSum += ( ((mid-1)*(mid))/2 - ((mid-1-len)*(mid-len))/2 );
                else if(len != 0 && len==mid-1)   
                    currSum += ((mid-1)*(mid))/2 ;
                else if(len != 0 && len>mid-1)   
                    currSum += ( ((mid-1)*(mid))/2 + len-(mid-1) );
            }

            //binary search processing
            if(currSum < maxSum)   {
                res_index_val = max(res_index_val,mid);
                lb = mid + 1;
            }
            else if(currSum == maxSum)   {
                res_index_val = max(res_index_val,mid);
                lb = mid + 1;
            }
            else {
                ub = mid - 1;
            }
        }   

        return res_index_val;
    }
};
download (2).jfif