1218. Longest Arithmetic Subsequence of Given Difference
Medium
2.2K
57
Companies
Given an integer array arr and an integer difference, return the length of the longest subsequence in arr which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals difference.

A subsequence is a sequence that can be derived from arr by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: arr = [1,2,3,4], difference = 1
Output: 4
Explanation: The longest arithmetic subsequence is [1,2,3,4].
Example 2:

Input: arr = [1,3,5,7], difference = 1
Output: 1
Explanation: The longest arithmetic subsequence is any single element.
Example 3:

Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2
Output: 4
Explanation: The longest arithmetic subsequence is [7,5,3,1].
 

Constraints:

1 <= arr.length <= 105
-104 <= arr[i], difference <= 104
88.7K
165K
53.8%




// class Solution {
// public:
//     int fun(int idx, int prev, vector<int> &arr, int d, vector<vector<int>> &dp) {
//         if(idx==arr.size()+1) 
//             return 0;

//         if(prev!=0 && dp[prev][idx]!=-1)
//             return dp[prev][idx];

//         if(prev!=0 && arr[idx-1]-arr[prev-1]==d)   {
//             //take 
//             int take = 1 + fun(idx+1, idx, arr, d, dp);
//             //not take
//             int not_take = 0 + fun(idx+1, prev, arr, d, dp);
//             return dp[prev][idx] = max(take, not_take);
//         }
//         else if(prev==0)   {
//             //take 
//             int take = 1 + fun(idx+1, idx, arr, d, dp);
//             //not take
//             int not_take = 0 + fun(idx+1, prev, arr, d, dp);
//             return dp[prev][idx] = max(take, not_take);
//         }
//         else {
//             return dp[prev][idx] = 0 + fun(idx+1, prev, arr, d, dp);
//         }
//     }

//     int longestSubsequence(vector<int>& arr, int difference) {
//         int n = arr.size();
//         vector<vector<int>> dp(n+1, vector<int> (n+1,-1) );
//         return fun(1,0,arr,difference,dp);
//     }
// };




class Solution {
public:
    int longestSubsequence(vector<int>& arr, int difference) {
        int n = arr.size();
        int mxLen = 1;
        unordered_map<int,int> mp;

        for(int i=0; i<n; i++)  {
            int to_f = arr[i] - (difference);
            if(mp.find(to_f)!=mp.end()) {
                int f = mp[to_f];
                mxLen = max(mxLen, 1+f);
                mp[arr[i]] = 1 + f;
            }
            else    {
                mp[arr[i]] = 1;
            }
        }

        return mxLen;
    }
};
