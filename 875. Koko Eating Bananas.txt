875. Koko Eating Bananas
Medium
6.2K
302
Companies
Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.

Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.

Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.

Return the minimum integer k such that she can eat all the bananas within h hours.

 

Example 1:

Input: piles = [3,6,7,11], h = 8
Output: 4
Example 2:

Input: piles = [30,11,23,4,20], h = 5
Output: 30
Example 3:

Input: piles = [30,11,23,4,20], h = 6
Output: 23
 

Constraints:

1 <= piles.length <= 104
piles.length <= h <= 109
1 <= piles[i] <= 109
Accepted
283.8K
Submissions
550.9K
Acceptance Rate
51.5%





C++ || Binary Search || Explained Approach || Commented Code
_prabal_singh_
100 Days Badge 2022
12
a few seconds ago
Intuition
Finding a suitable value in range : Binary Search Qeustion !!!

Approach
Firstly, we will find the range for binary search , that is, low = 1 & high = largest value in piles.
Secondly, we will apply binary search in range [low,high]. Getting a mid value each time , we use that mid value to evaluate the number of hours over the piles for value of mid.
Thirdly, if hours <= h we will search in lower half , AND if hours > h we will search in upper half.

download (2).jfif

Complexity
Time complexity : O(n*log|n| *n) [worst case]
Space complexity : O(1)
Code
class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int h) {

        //helping values for binary search
        int n = piles.size();
        int low = 1;
        int high = INT_MIN;
        int res = INT_MAX;

        for(int i=0; i<n; i++)  
            high = max(high,piles[i]);
        

        //binary search
        while(low <= high)  {
            int mid = low + ((high - low) / 2);

            //evaluating hours for current mid value
            double cnt = 0;
            for(int i=0; i<n; i++)  {
                int curr = piles[i];
                double val = 0;
                if(curr<=mid)   {   
                    val = 1;   
                }
                else if(curr>mid)   {   
                    val = curr/mid;
                    if(curr%mid!=0)
                        val++;
                }
                
                cnt += val;
            }

            if(cnt > h)    {
                low = mid + 1;
            }
            else {
                res = min(res,mid);
                high = mid - 1;
            }
        }

        return res;
    }
};