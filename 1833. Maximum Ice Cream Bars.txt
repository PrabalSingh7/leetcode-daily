1833. Maximum Ice Cream Bars
Medium
1.7K
602
Companies
It is a sweltering summer day, and a boy wants to buy some ice cream bars.

At the store, there are n ice cream bars. You are given an array costs of length n, where costs[i] is the price of the ith ice cream bar in coins. The boy initially has coins coins to spend, and he wants to buy as many ice cream bars as possible. 

Return the maximum number of ice cream bars the boy can buy with coins coins.

Note: The boy can buy the ice cream bars in any order.

 

Example 1:

Input: costs = [1,3,2,4,1], coins = 7
Output: 4
Explanation: The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7.
Example 2:

Input: costs = [10,6,8,7,7,8], coins = 5
Output: 0
Explanation: The boy cannot afford any of the ice cream bars.
Example 3:

Input: costs = [1,6,3,1,2,5], coins = 20
Output: 6
Explanation: The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18.
 

Constraints:

costs.length == n
1 <= n <= 105
1 <= costs[i] <= 105
1 <= coins <= 108
Accepted
121.8K
Submissions
163.9K
Acceptance Rate
74.3%




C++ || Sort || Greedy || Explained || Commented Code
_prabal_singh_
100 Days Badge 2022
3
a few seconds ago
Intuition
Simple sorting question

Approach
sort the given costs array
maintain a current sum variable currSum & one count variable
iterate till currSum <= coins
Complexity
Time complexity : O(nlogn)
Space complexity : O(1)
Code
class Solution {
public:
    int maxIceCream(vector<int>& costs, int coins) {

        //sorting the array
        sort(costs.begin(), costs.end());

        //helping variables
        int count = 0;
        double currSum = 0;

        for(int i=0; i<costs.size(); i++)   {
            currSum += costs[i];
            if(currSum==coins)  {       //return as currSum==coins with increment
                count++;
                return count;
            }
            else if(currSum>coins)  {   //return as currSum>coins without increment
                return count;
            }
            else    {           //incrementing count otherwise
                count++;
            }
        }

        return count;
    }
};