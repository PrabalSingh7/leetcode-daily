540. Single Element in a Sorted Array
Medium
8.5K
131
Companies
You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.

Return the single element that appears only once.

Your solution must run in O(log n) time and O(1) space.

 

Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: nums = [3,3,7,7,10,11,11]
Output: 10
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 105
Accepted
436.9K
Submissions
738.5K
Acceptance Rate
59.2%



class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n = nums.size();
        int low = 0;
        int high = n-1;

        if(n==1)    {
            return nums[0];
        }      

        while(low<=high && high>0 && low<n-1) {
            if(nums[low]!=nums[low+1])  return nums[low];
            if(nums[high]!=nums[high-1])    return nums[high];
            low += 2;
            high -=2;
        }

        return -1;
    }
};