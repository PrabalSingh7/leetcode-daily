2389. Longest Subsequence With Limited Sum
Easy
539
66
Companies
You are given an integer array nums of length n, and an integer array queries of length m.

Return an array answer of length m where answer[i] is the maximum size of a subsequence that you can take from nums such that the sum of its elements is less than or equal to queries[i].

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: nums = [4,5,2,1], queries = [3,10,21]
Output: [2,3,4]
Explanation: We answer the queries as follows:
- The subsequence [2,1] has a sum less than or equal to 3. It can be proven that 2 is the maximum size of such a subsequence, so answer[0] = 2.
- The subsequence [4,5,1] has a sum less than or equal to 10. It can be proven that 3 is the maximum size of such a subsequence, so answer[1] = 3.
- The subsequence [4,5,2,1] has a sum less than or equal to 21. It can be proven that 4 is the maximum size of such a subsequence, so answer[2] = 4.
Example 2:

Input: nums = [2,3,4,5], queries = [1]
Output: [0]
Explanation: The empty subsequence is the only subsequence that has a sum less than or equal to 1, so answer[0] = 0.
 

Constraints:

n == nums.length
m == queries.length
1 <= n, m <= 1000
1 <= nums[i], queries[i] <= 106
Accepted
34K
Submissions
50.7K
Acceptance Rate
67.1%


Intuition
Sort the nums and then process it to find neccessary query

Approach
Firstly, we will sort the nums array
Secondly, we will create a helping array ie preceding sum array
Lastly, apply binary search on this preceding sum array for each query element.

Complexity
Time complexity : O(nlongm)
Space complexity: O(1)
Code
class Solution {
public:
    vector<int> answerQueries(vector<int>& nums, vector<int>& queries) {
        
        //helping data structures & variables
        int n = nums.size();
        vector<int> res;
        int s = 0;

        //sorting the vector : nums 
        sort(nums.begin(), nums.end());

        //modifying the nums array to a preceding sum array
        for(int i=0; i<n; i++)  {
            s += nums[i];
            nums[i] = s;
        }

        //applying binary search on modified nums array for every query 
        for(int i=0; i<queries.size(); i++)  {
            int start = 0;
            int end = n-1;
            int midIndex = (end+start)/2;
            int currRes = 0;
            int toFind = queries[i];
            while(start<=end)  {
                midIndex = (start+end)/2;
                if(nums[midIndex]==toFind)  {
                    currRes = max(currRes,midIndex+1);
                    start = midIndex+1;
                    end = midIndex-1;
                }
                else if(nums[midIndex]>toFind)  {
                    end = midIndex-1;
                }
                else {
                    currRes = max(currRes,midIndex+1);
                    start = midIndex+1;
                }
            }
            res.push_back(currRes);
        }

    return res;
    }
};