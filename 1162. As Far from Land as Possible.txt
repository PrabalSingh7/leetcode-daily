1162. As Far from Land as Possible
Medium
2.6K
76
Companies
Given an n x n grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, return -1.

The distance used in this problem is the Manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.

 

Example 1:


Input: grid = [[1,0,1],[0,0,0],[1,0,1]]
Output: 2
Explanation: The cell (1, 1) is as far as possible from all the land with distance 2.
Example 2:


Input: grid = [[1,0,0],[0,0,0],[0,0,0]]
Output: 4
Explanation: The cell (2, 2) is as far as possible from all the land with distance 4.
 

Constraints:

n == grid.length
n == grid[i].length
1 <= n <= 100
grid[i][j] is 0 or 1
Accepted
86.6K
Submissions
177.5K
Acceptance Rate
48.8%




C++ || BFS || Explained Approach || Commenetd Code
_prabal_singh_
100 Days Badge 2022
3
a minute ago
Intuition
Breadth First Search.

Approach
We will perform a BFS , starting from all the land node.
Each time we find an UNVISITED water node , we will increment the distance by 1.
Result will be max distance attained during BFS , as farthest node from all the nodes according to manhattan distance will be the one that takes the most steps (up,right,left,down).
Complexity
Time complexity : O(n^2)
Space complexity : O(n^2)
Code
class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {

        //initializing helping variables
        int n = grid.size();
        int result = -1;

        //initializing queue for 
        queue<pair<pair<int,int>,int>> q;
        //initializing utility matrix for BFS
        vector<vector<int>> util(n , vector<int> (n,-1));

        //these two vectors for traversing nodes as (left,up,right,down)
        vector<int> drow {0,-1,0,1};
        vector<int> dcol {-1,0,1,0};

        //pushing all land nodes in queue with initial distance as 0
        for(int i=0; i<n; i++)  {
            for(int j=0; j<n; j++)  {
                if(grid[i][j]==1)   {
                    q.push({{i,j},0});
                    util[i][j] = 0;
                }
            }
        }
      
        //  BFS
        while(!q.empty())   {
            auto t = q.front();
            q.pop();
            int r = t.first.first;
            int c = t.first.second;
            int d = t.second;

            for(int i=0; i<4; i++)  {
                int dr = r + drow[i];
                int dc = c + dcol[i];

                //checking is its an unvisited water node or not.
                if(dr>=0&&dr<n&&dc>=0&&dc<n&&grid[dr][dc]==0&&util[dr][dc]==-1) {
                    q.push({{dr,dc},d+1});
                    util[dr][dc] = d+1;

                   //updating our result(maximum distnace) if possible
                    if(d+1!=0)  {
                        result = max(result,d+1);
                    }
                }
            }
        }

        return result;
    }
};
sad-thumbs-up-cat.3.meme.webp






