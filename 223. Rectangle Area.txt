223. Rectangle Area
Medium

1515

1455

Add to List

Share
Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.

The first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2).

The second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2).

 

Example 1:

Rectangle Area
Input: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2
Output: 45
Example 2:

Input: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2
Output: 16
 

Constraints:

-104 <= ax1 <= ax2 <= 104
-104 <= ay1 <= ay2 <= 104
-104 <= bx1 <= bx2 <= 104
-104 <= by1 <= by2 <= 104
Accepted
179,680
Submissions
408,154



class Solution {
public:
    int area1 = 0;
    int area2 = 0;
    int commonArea = 0;
    int resArea = 0;
    
    int calArea(int ax1, int ay1, int ax2, int ay2)   {
        int l = ax2-ax1;
        int b = ay2-ay1;
        return l*b;
    }
    
    int intersectionX(int ax1, int ax2, int bx1, int bx2)  {
        int end = min(bx2,ax2);
        int start = max(bx1,ax1);
        return end-start;
    }
    int intersectionY(int ay1, int ay2, int by1, int by2)  {
        int end = min(by2,ay2);
        int start = max(by1,ay1);
        return end-start;
    }
    
    int computeArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {
        
        area1 = calArea(ax1,ay1,ax2,ay2);
        area2 = calArea(bx1,by1,bx2,by2);
        
        int interX = intersectionX(ax1,ax2,bx1,bx2);
        int interY = intersectionY(ay1,ay2,by1,by2);
        // cout<<interX<<" "<<interY<<"\n";
        if(interX>0&&interY>0)
            commonArea = interX*interY;
        
        // cout<<area1<<" "<<area2<<" "<<commonArea<<"\n";
        resArea = area1 + area2 - commonArea;
        return resArea;
    }
};