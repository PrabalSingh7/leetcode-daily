2348. Number of Zero-Filled Subarrays
Medium
1.2K
42
Companies
Given an integer array nums, return the number of subarrays filled with 0.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,3,0,0,2,0,0,4]
Output: 6
Explanation: 
There are 4 occurrences of [0] as a subarray.
There are 2 occurrences of [0,0] as a subarray.
There is no occurrence of a subarray with a size more than 2 filled with 0. Therefore, we return 6.
Example 2:

Input: nums = [0,0,0,2,0,0]
Output: 9
Explanation:
There are 5 occurrences of [0] as a subarray.
There are 3 occurrences of [0,0] as a subarray.
There is 1 occurrence of [0,0,0] as a subarray.
There is no occurrence of a subarray with a size more than 3 filled with 0. Therefore, we return 9.
Example 3:

Input: nums = [2,10,2019]
Output: 0
Explanation: There is no subarray filled with 0. Therefore, we return 0.
 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109
Accepted
64.3K
Submissions
99.4K
Acceptance Rate
64.7%





C++ || Mathematical Approach || Explained
_prabal_singh_
100 Days Badge 2022
13
a few seconds ago
Intuition
Count consequitive zeros and add formulated value of them to result :)

Approach
We will traverse the array and evaluate the number of consequtive 0's , lets call the number to be cnt;
Then we will evaluate the number of subsarrays possible with cnt, ie " the sum of first n natural number(s) " .
Val = [ cnt*(cnt+1) ] / 2;
And add this value for each group of zeros to the result ;)
download (2).jfif

Complexity
Time complexity : O(n*k)
Space complexity : O(1)
Code
class Solution {
public:
    long long zeroFilledSubarray(vector<int>& nums) {
        int n = nums.size();
        long long res = 0;

        for(int i=0; i<n; i++)  {
            if(nums[i]!=0)
                continue;
            //case when current element if 0, so evaluating 
            else {
                int j = i;
                //we'll find number of consequtive number of zeros
                for(; j<n && nums[j]==0; j++)   ;
                long long cnt = j-i;
                //using formula of sum of n natural numbers
                res += (cnt * (cnt+1))/2;
                //updating value of i.
                if(j!=n)    {   i = j-1;}
                else {i=j;}
            }
        }
        
        return res;
    }
};
images.jfif