36. Valid Sudoku
Medium

6937

818

Add to List

Share
Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit 1-9 or '.'.
Accepted
927,000
Submissions
1,627,206




class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        
        vector<vector<bool>> row(9, vector<bool> (10, false));
        vector<vector<bool>> col(9, vector<bool> (10, false));

        for(int i=0; i<row.size(); i++) {
            for(int j=0; j<col.size(); j++) {
                if(!isdigit(board[i][j]))
                    continue;
                
                int val = board[i][j] - '0';
                 
                int r = i;
                int c = j;
                
                //checking for row&cool
                if(row[r][val]==true || col[c][val]==true)  {                  
                    return false;                    
                }
                else {
                    row[r][val]=true;
                    col[c][val]=true ;
                }
            
            }
        }
        
        //checking if the all small 3*3 have unique values
        for(int i=0; i<9; i+=3)  {
            for(int j=0; j<9; j+=3) {
                unordered_set<int> s;
                for(int r=0; r<3; r++)  {
                    for(int c=0; c<3; c++)  {
                        if(!isdigit(board[i+r][j+c]))
                            continue;
                        int val = board[i+r][j+c] - '0';
                        if(s.find(val)!=s.end())    {
                            cout<<"due small box "<<i+r<<" "<<j+c<<"\n";
                            return false;
                        }
                        s.insert(val);
                    }
                }
            }
        }
        
        return true;
    }
};